-- Удаление таблиц (если существуют)
DROP TABLE IF EXISTS film_likes CASCADE;
DROP TABLE IF EXISTS film_genre CASCADE;
DROP TABLE IF EXISTS friendship CASCADE;
DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS genre CASCADE;
DROP TABLE IF EXISTS mpa_rating CASCADE;

-- Создание таблиц
CREATE TABLE IF NOT EXISTS mpa_rating (
    mpa_id      INT PRIMARY KEY,
    mpa_name        VARCHAR(10) NOT NULL UNIQUE,
    description VARCHAR(200)
);

CREATE TABLE IF NOT EXISTS genre (
    genre_id INT PRIMARY KEY,
    name     VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS users (
    user_id  INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR(50) NOT NULL UNIQUE,
    login    VARCHAR(50) NOT NULL,
    name     VARCHAR(50),
    birthday DATE
);

CREATE TABLE IF NOT EXISTS films (
    film_id       INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name          VARCHAR(100) NOT NULL,
    description   VARCHAR(200),
    release_date  DATE         NOT NULL,
    duration      INT          NOT NULL CHECK (duration > 0),
    mpa_rating_id INT REFERENCES mpa_rating (mpa_id)
);

CREATE TABLE IF NOT EXISTS friendship (
                                          user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    friend_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    status VARCHAR(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'CONFIRMED')),
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, friend_id),
    CHECK (user_id != friend_id)
    );

CREATE TABLE IF NOT EXISTS film_genre (
    film_id  INT REFERENCES films (film_id) ON DELETE CASCADE,
    genre_id INT REFERENCES genre (genre_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS film_likes (
    film_id INT REFERENCES films (film_id) ON DELETE CASCADE,
    user_id INT REFERENCES users (user_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, user_id)
);